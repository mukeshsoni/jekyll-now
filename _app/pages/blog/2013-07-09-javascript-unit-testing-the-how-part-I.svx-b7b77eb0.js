import{S as n,i as s,s as a,k as t,e,t as o,J as p,d as c,n as l,c as u,a as i,g as r,b as k,f as h,G as d,I as f}from"../../chunks/vendor-ab208dc6.js";function m(n){let s,a,m,w,g,y,b,v,T,E,j,q,P,x,I,H,L,W,M,A,R,S,B,C,N,O,_,J,G,U,z,D,F,K,Q,V,X,Y,Z,$,nn,sn,an,tn,en,on,pn,cn,ln,un,rn,kn,hn,dn,fn,mn,wn,gn,yn,bn,vn,Tn,En,jn,qn,Pn,xn,In;return{c(){s=t(),a=e("p"),m=o("Testing javascript is a tricky affair. Mainly because you can’t directly run your javascript written for a browser us something like ‘js myjstest.js’ in the command line. Surely there are testing frameworks and task managers like grunt which finally enable you to do exactly that, but it’s a lot of plumbing to get going.\nThe second reason it’s tough to test javascript is because of it’s async nature. Testing asynchronous functions is kind of a pain in the ass."),w=t(),g=e("p"),y=o("There are a lot of helpful libraries to tame the beast. But we will not start with any framework/library. We will start with the basics which would also allow us to better appreciate the frameworks."),b=t(),v=e("p"),T=o("Lets start with writing a very simple unit test (testing isolated pieces of code) for a very simple function."),E=t(),j=e("pre"),q=t(),P=e("p"),x=o("How do we test the above. We want to verify that if we call add(3, 9), the function should return 12 and so on."),I=t(),H=e("p"),L=o("One way we can do this is by putting the above function in a script tag in an html file, opening that file in a browser and then calling the ‘add’ function in the console."),W=t(),M=e("pre"),A=t(),R=e("p"),S=e("img"),C=t(),N=e("p"),O=o("That is unit testing for you. The problem - it’s not “automated”."),_=t(),J=e("p"),G=o("How can we automate it? The simplest way to do it would be to make the test calls in the same html and check their validity."),U=t(),z=e("pre"),D=t(),F=e("p"),K=o("We can do one better by putting the actual code and the test code in external files and link them in our html file."),Q=t(),V=e("p"),X=o("But our test code is so verbose and non reusable that this might be the last time we test anything. We even have to keep track of what we put in the console.log messages (e.g. a copy paste error would result in “adding 2 and 5 passed” twice)."),Y=t(),Z=e("p"),$=o("Assertions -\nAll we wanted to do above was something like “i am telling you, 2+5 is equal to 7. If not, ask the function writer to repeat 2nd standard”. And this should happen is as less code as possible. Assertions allow you to do exactly that in just a single line. So you go something like -"),nn=t(),sn=e("pre"),an=t(),tn=e("p"),en=o("And the assert function should throw out pass and fail messages accordingly. Let’s try writing one -"),on=t(),pn=e("pre"),cn=t(),ln=e("p"),un=o("Now we can drop this function whenever we want to test stuff. In our case -"),rn=t(),kn=e("pre"),hn=t(),dn=e("p"),fn=o("We can go ahead and enhance the assert function to tell us the number of test cases which passed -"),mn=t(),wn=e("pre"),gn=t(),yn=e("p"),bn=o("That is it. Not at all perfect but atleast we have a goto function for testing equality related stuff. In real world we will not print to the console in the assert function. Too much coupling there. The assert function will simply test whether the assertion is true or not. If not, raise an exception."),vn=t(),Tn=e("pre"),En=t(),jn=e("p"),qn=o("If we want to be purist, we should also remove passedTestCount++ from assertion function. There is no reason for assertion function to deal with correct/incorrect assertion counts. But i will leave that to you."),Pn=t(),xn=e("p"),In=o("In the next article we will try to see how we can enhance our little testing framework (ok, just one function for now) to handle more complicated cases. Till then, adios!"),this.h()},l(n){p('[data-svelte="svelte-1tjcprc"]',document.head).forEach(c),s=l(n),a=u(n,"P",{});var t=i(a);m=r(t,"Testing javascript is a tricky affair. Mainly because you can’t directly run your javascript written for a browser us something like ‘js myjstest.js’ in the command line. Surely there are testing frameworks and task managers like grunt which finally enable you to do exactly that, but it’s a lot of plumbing to get going.\nThe second reason it’s tough to test javascript is because of it’s async nature. Testing asynchronous functions is kind of a pain in the ass."),t.forEach(c),w=l(n),g=u(n,"P",{});var e=i(g);y=r(e,"There are a lot of helpful libraries to tame the beast. But we will not start with any framework/library. We will start with the basics which would also allow us to better appreciate the frameworks."),e.forEach(c),b=l(n),v=u(n,"P",{});var o=i(v);T=r(o,"Lets start with writing a very simple unit test (testing isolated pieces of code) for a very simple function."),o.forEach(c),E=l(n),j=u(n,"PRE",{class:!0}),i(j).forEach(c),q=l(n),P=u(n,"P",{});var k=i(P);x=r(k,"How do we test the above. We want to verify that if we call add(3, 9), the function should return 12 and so on."),k.forEach(c),I=l(n),H=u(n,"P",{});var h=i(H);L=r(h,"One way we can do this is by putting the above function in a script tag in an html file, opening that file in a browser and then calling the ‘add’ function in the console."),h.forEach(c),W=l(n),M=u(n,"PRE",{class:!0}),i(M).forEach(c),A=l(n),R=u(n,"P",{});var d=i(R);S=u(d,"IMG",{src:!0,alt:!0}),d.forEach(c),C=l(n),N=u(n,"P",{});var f=i(N);O=r(f,"That is unit testing for you. The problem - it’s not “automated”."),f.forEach(c),_=l(n),J=u(n,"P",{});var B=i(J);G=r(B,"How can we automate it? The simplest way to do it would be to make the test calls in the same html and check their validity."),B.forEach(c),U=l(n),z=u(n,"PRE",{class:!0}),i(z).forEach(c),D=l(n),F=u(n,"P",{});var Hn=i(F);K=r(Hn,"We can do one better by putting the actual code and the test code in external files and link them in our html file."),Hn.forEach(c),Q=l(n),V=u(n,"P",{});var Ln=i(V);X=r(Ln,"But our test code is so verbose and non reusable that this might be the last time we test anything. We even have to keep track of what we put in the console.log messages (e.g. a copy paste error would result in “adding 2 and 5 passed” twice)."),Ln.forEach(c),Y=l(n),Z=u(n,"P",{});var Wn=i(Z);$=r(Wn,"Assertions -\nAll we wanted to do above was something like “i am telling you, 2+5 is equal to 7. If not, ask the function writer to repeat 2nd standard”. And this should happen is as less code as possible. Assertions allow you to do exactly that in just a single line. So you go something like -"),Wn.forEach(c),nn=l(n),sn=u(n,"PRE",{class:!0}),i(sn).forEach(c),an=l(n),tn=u(n,"P",{});var Mn=i(tn);en=r(Mn,"And the assert function should throw out pass and fail messages accordingly. Let’s try writing one -"),Mn.forEach(c),on=l(n),pn=u(n,"PRE",{class:!0}),i(pn).forEach(c),cn=l(n),ln=u(n,"P",{});var An=i(ln);un=r(An,"Now we can drop this function whenever we want to test stuff. In our case -"),An.forEach(c),rn=l(n),kn=u(n,"PRE",{class:!0}),i(kn).forEach(c),hn=l(n),dn=u(n,"P",{});var Rn=i(dn);fn=r(Rn,"We can go ahead and enhance the assert function to tell us the number of test cases which passed -"),Rn.forEach(c),mn=l(n),wn=u(n,"PRE",{class:!0}),i(wn).forEach(c),gn=l(n),yn=u(n,"P",{});var Sn=i(yn);bn=r(Sn,"That is it. Not at all perfect but atleast we have a goto function for testing equality related stuff. In real world we will not print to the console in the assert function. Too much coupling there. The assert function will simply test whether the assertion is true or not. If not, raise an exception."),Sn.forEach(c),vn=l(n),Tn=u(n,"PRE",{class:!0}),i(Tn).forEach(c),En=l(n),jn=u(n,"P",{});var Bn=i(jn);qn=r(Bn,"If we want to be purist, we should also remove passedTestCount++ from assertion function. There is no reason for assertion function to deal with correct/incorrect assertion counts. But i will leave that to you."),Bn.forEach(c),Pn=l(n),xn=u(n,"P",{});var Cn=i(xn);In=r(Cn,"In the next article we will try to see how we can enhance our little testing framework (ok, just one function for now) to handle more complicated cases. Till then, adios!"),Cn.forEach(c),this.h()},h(){document.title="JavaScript Unit Testing - the HOW - Part I",k(j,"class","language-svelte"),k(M,"class","language-javascript"),S.src!==(B="https://farm9.staticflickr.com/8643/16196564474_63b66e88a3_o.png")&&k(S,"src","https://farm9.staticflickr.com/8643/16196564474_63b66e88a3_o.png"),k(S,"alt","Running the test in the browser"),k(z,"class","language-javascript"),k(sn,"class","language-javascript"),k(pn,"class","language-javascript"),k(kn,"class","language-javascript"),k(wn,"class","language-javascript"),k(Tn,"class","language-javascript")},m(n,t){h(n,s,t),h(n,a,t),d(a,m),h(n,w,t),h(n,g,t),d(g,y),h(n,b,t),h(n,v,t),d(v,T),h(n,E,t),h(n,j,t),j.innerHTML='<code class="language-svelte">function add(x, y) <span class="token language-javascript"><span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></span></code>',h(n,q,t),h(n,P,t),d(P,x),h(n,I,t),h(n,H,t),d(H,L),h(n,W,t),h(n,M,t),M.innerHTML='<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',h(n,A,t),h(n,R,t),d(R,S),h(n,C,t),h(n,N,t),d(N,O),h(n,_,t),h(n,J,t),d(J,G),h(n,U,t),h(n,z,t),z.innerHTML='<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token comment">// start test code</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>adding <span class="token number">2</span> and <span class="token number">5</span> passed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>adding <span class="token number">2</span> and <span class="token number">5</span> failed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>adding <span class="token operator">-</span><span class="token number">1</span> and <span class="token number">3</span> passed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>adding <span class="token operator">-</span><span class="token number">1</span> and <span class="token number">3</span> failed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span>\n<span class="token comment">// end test code</span></code>',h(n,D,t),h(n,F,t),d(F,K),h(n,Q,t),h(n,V,t),d(V,X),h(n,Y,t),h(n,Z,t),d(Z,$),h(n,nn,t),h(n,sn,t),sn.innerHTML='<code class="language-javascript"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">"learn your maths"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',h(n,an,t),h(n,tn,t),d(tn,en),h(n,on,t),h(n,pn,t),pn.innerHTML='<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">expression<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Test <span class="token keyword">case</span> failed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if no fail message was passed by the function caller</span>\n  <span class="token punctuation">&#125;</span>\n\n  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Test <span class="token keyword">case</span> passed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',h(n,cn,t),h(n,ln,t),d(ln,un),h(n,rn,t),h(n,kn,t),kn.innerHTML='<code class="language-javascript"><span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>learn your maths<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>learn your maths<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token function">assert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>learn your maths<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>',h(n,hn,t),h(n,dn,t),d(dn,fn),h(n,mn,t),h(n,wn,t),wn.innerHTML='<code class="language-javascript"><span class="token keyword">var</span> passedTestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">expression<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Test <span class="token keyword">case</span> failed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if no fail message was passed by the function caller</span>\n  <span class="token punctuation">&#125;</span>\n\n  passedTestCount<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Test <span class="token keyword">case</span> passed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',h(n,gn,t),h(n,yn,t),d(yn,bn),h(n,vn,t),h(n,Tn,t),Tn.innerHTML='<code class="language-javascript"><span class="token keyword">function</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token parameter">expression<span class="token punctuation">,</span> message</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>expression<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>message <span class="token operator">||</span> <span class="token operator">&amp;</span>quot<span class="token punctuation">;</span>Test <span class="token keyword">case</span> failed<span class="token operator">&amp;</span>quot<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//if no fail message was passed by the function caller</span>\n  <span class="token punctuation">&#125;</span>\n\n  passedTestCount<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">&#125;</span></code>',h(n,En,t),h(n,jn,t),d(jn,qn),h(n,Pn,t),h(n,xn,t),d(xn,In)},p:f,i:f,o:f,d(n){n&&c(s),n&&c(a),n&&c(w),n&&c(g),n&&c(b),n&&c(v),n&&c(E),n&&c(j),n&&c(q),n&&c(P),n&&c(I),n&&c(H),n&&c(W),n&&c(M),n&&c(A),n&&c(R),n&&c(C),n&&c(N),n&&c(_),n&&c(J),n&&c(U),n&&c(z),n&&c(D),n&&c(F),n&&c(Q),n&&c(V),n&&c(Y),n&&c(Z),n&&c(nn),n&&c(sn),n&&c(an),n&&c(tn),n&&c(on),n&&c(pn),n&&c(cn),n&&c(ln),n&&c(rn),n&&c(kn),n&&c(hn),n&&c(dn),n&&c(mn),n&&c(wn),n&&c(gn),n&&c(yn),n&&c(vn),n&&c(Tn),n&&c(En),n&&c(jn),n&&c(Pn),n&&c(xn)}}}const w={title:"JavaScript Unit Testing - the HOW - Part I",date:"2013-07-09",slug:"2013-07-09-javascript-unit-testing-the-how-part-I"};export default class extends n{constructor(n){super(),s(this,n,null,m,a,{})}}export{w as metadata};
